============================================================
NODEJS
============================================================
E uma plataforma que utiliza da v8 que e a engine de entendimento 
utilizada pelo google chrome que enterpreta codigos javascript no 
lado do backend na parte de servidores
INSTALANDO O NODEJS - acessar o https://nodejs.org/en/download
pode ser feitor atraves de pacotes baixando direto do site e executando ou 
atraves de um gerenciador de pacote, no caso para windows utilizar o chocolate
basta conferir na documentação do proprio nodejs com e feita a instalaçao 

=============================================================
API REST
=============================================================
e basicamente separa o frontend do backend.Nesse tipo de estrutura
o backend fornece todos os dados e serviços como a conexão com banco de dados 
a criação das regras de negocio e todas as regras que a aplicação ira conter de 
forma separada do frontend, difernte do formato MVC onde o backend e frontend 
estão juntos. Dessa forma e possivel ter varias tipos de frontend como web, mobile 
onde eles tem disponivel os mesmo dados fornecedos apenas por um backend.
==============================================================
CRIANDO A ESTRUTURA DO PROJETO
==============================================================
iniciar o projeto na pastar raiz com:
npm init -y
esse comando ira criar o arquivo package.json onde contem as conf 

instalar o express - mini-framework que gerencia rotas e views
npm install express
apos rodar esse comando a pasta node_modules deve aparecer e 
dentro do package.json a dependencia do express e sua versão esta la

criar e configurar o arquivo principal do servidor 
criar o arquivo - server.js ou index.js 
dentro do arquivo:
const express = require('express') - importando o express dentro do app 

const app = express() - iniciando o aplicativo 

app.listen(3001) - definindo a porta que o aplicativo ira rodar 
no termina rodar o aplicativo - node server.js 

======================================================================
CRIANDO PRIMEIRA ROTA - com express 
======================================================================
const express = require('express') - importando o express dentro do app 

const app = express() - iniciando o aplicativo 

app.get("/", (req, res)=>{
    res.send("hello world");
})
app.listen(3001) - definindo a porta que o aplicativo ira rodar 

get - tipo de requisao http que sera utilizado (pega alguma coisa)
"/" - nome da rota, nessa caso o / segnifica rota raiz, como se fosse 
      a page home mais poderia ser "/minharota"
req - parametro que contem o request da requisição, como por exemplo
      cabeçalho(header), usuario logado, ip, corpo da requisao(body), 
      parametros, autenticação...
res - parametro que devolve a resposta para a requisição dentro dele 
      exite varias metodos que pode ser utilizado para devolver uma 
      resposta, como por exemplo o send()

======================================================================
UTILIZANDO NODEMON
======================================================================
e utilizado para realizar a reinicialização automatica do servidor 
quando houver alguma alteração
instalar como dependencia de desenvolvimento
npm install -D nodemon

apos a instalação entrar no package.json na parte de scripts 
e definir um script com o comando do nodemon
"dev": "nodemon server.js"

para utilizar scripts do package.json em vez do comando node ira 
chamar o seguinte comando:
npm run dev - "dev" e nome do script que foi criando no package.json 
=====================================================================
INSTALANDO MONGODB - COM DOCKER
=====================================================================
caso não tem o docker instalar seguindo os passos da documentação em
docker.com 
criando container:
docker pull mongo - busca uma img no repo do docker com esse nome 

criar o container utilizando a img baixada:
docker run --name mongo -p 27017:27017 -d mongo

apos isso acessar o site robomongo.org e baixar e instalar o 
robo 3t para visualizar os schemas do MONGODB
==========================================================================
CONECTANDO DATABASE
==========================================================================
primeiramente instalar uma nova dependencia:
npm install mongoose

mongoose - e um orm(object relacional map) de bancos não relacionais, orm encapsula a logica das operaçoes
do banco atraves do codigo isso quer dizer que em vez de utilizarmos query nativa do 
banco iremos utilizar codigos javascript para realizar as operaçoes como insert, delete,
update, create, consultas etc. 

iniciando a conexão com banco:
const express = require('express') - importando o express dentro do app 
const mongoose = require('mongoose') 

const app = express() - iniciando o aplicativo 

mongoose.connect('mongodb://localhost:27017/nodeapi', {useNewUrlParser: true, useUnifiedTopology: true});

app.get("/", (req, res)=>{
    res.send("hello world");
})
app.listen(3001) - definindo a porta que o aplicativo ira rodar 

mongodb:// - protocolo de conexão com mongo 
localhost:27017 - endereço e porta do banco 
/nodeapi - nome do schema database que ira utilizar 

caso não retorne nenhum erro ao start o servidor esta tudo ok
===================================================================
CRIANDO MODEL DE PRODUTO
===================================================================
na raiz do projeto adicionar a pasta 'src' dentro da src add a pasta 
'models' e dentro de models criar o arquivo 'Product.js'

dentro do Product.js - 
const mongoose = require('mongoose');

const ProductSchema = new mongoose.Schema({
      title:{
        type: String,
        required: true
      },
      description:{
            type: String, 
            required: true
      },
      url:{
            type: String,
            required: true
      },
      createdAt:{
            type: Date,
            default: Date.now
      }
});

mongoose.model("Product", ProductSchema)

apos a criação do product.js ir ate o arquivo server.js e adiconar abaixa da conexão 
com o banco um require:
require('./src/models/Product');

para adicionar varias esquemas para projetos maiores e não precisar ficar criando 
varios require e utilizado um biblioteca que adiciona todos os esquemas de uma vez.
primeiramente adicionar a dependencia
npm install require-dir 

apos a instalação adcionar dentro do server.js 
const requireDir = require('require-dir');

e subistituir require('./src/models/Product');
por requireDir('./src/models');

depois para adiconar um registro no banco para teste adiconar 
abaixo do requireDir 

const Product = mongoose.model("Product");

e dentro da primeira rota / 
app.get("/", (req, res)=>{
Product.create({
      title:"React Native",
      description:"Build native apps with React",
      url:"http://github.com/facebook/react-native"
})
    return res.send("hello world");
})

==================================================================
REESTRUTURAÇÃO DE ARQUIVOS 
==================================================================
SEPRANDO AS ROTAS EM UM OUTRO ARQUIVO 
add dentro da pasta src o arquivo routes.js que contera as rotas da 
aplicação 
dentro do routes.js:
 const express = require('express');
 const routes = express.Router();

const ProductController = require('./controllers/ProductController');

 routes.get("/product", ProductController.index)

 module.exports = routes;

depois dentro do server.js deixar da seguinte forma 

const express = require('express');
const mongoose = require('mongoose');
const requireDir = require('require-dir')

const app = express();

mongoose.connect('mongodb://localhost:27017/nodeapi', 
{useNewUrlParser: true, useUnifiedTopology: true });

requireDir('./src/models');

app.use("/api", require("./src/routes"));

app.listen(3001);

app.use - e como se fosse um metodo coringo que consegue receber qualquer requisição 
get,post,delete e repassa para o arquivo de toas 

SEPARANDO A PARTE DA LOGICA QUE ESTAVA DENTRO DA ROTA:

dentro de 'src' add um nova pasta chamada 'controllers'
e dentro da 'controllers' criar um arquivo chamdo 'ProductController.js'
dentro do ProductController.js:
const mongoose = require('mongoose');
const Product = mongoose.model('Product');

module.exports = {
      async index(req, res){
            const products = await Product.find();

            return res.json(products)
      },
};
=====================================================
UTILIZANDO O INSOMNIA
=====================================================
software utilizado para realizar teste em rotas, aceita 
todo tipo de requisição get, post, dele, put entre outras.
instalando o INSOMNIA: acessar https://insomnia.rest/download/
clica em isso core for windows ou de acordo com o sistema que
utilizar, depois next, next, finish
============================================================
CRIAÇÃO DE REGISTRO
============================================================
dentro do ProductController adicionar mais um metodo
const mongoose = require('mongoose');
const Product = mongoose.model('Product');

module.exports = {
      async index(req, res){
            const products = await Product.find();

            return res.json(products)
      },
      //novo metodo para criação de dados
      async store(req, res){
            const product = await Product.create(req.body);

            return res.json(product)
      }
};
 
adicionar uma rota de criação dentro do server.js 
routes.post("/products", ProductController.store);

e tmbm adicionar um configuração para o express conseguir 
retornar arquivos json. abaixo do const app = express()
adicionar app.use(express.json())
===============================================================
CRUD
===============================================================
criando o restante das rotas e dos metodos 
dentro do ProductController:
const mongoose = require('mongoose');
const Product = mongoose.model('Product');

module.exports = {
      async index(req, res){
            const products = await Product.find();

            return res.json(products)
      },

      //metodo para lista apenas um registro atraves do id
      async show(req, res){
            const product = await Product.findById(req.params.id);

            return res.json(product)
      },

      //metodo para criação de dados
      async store(req, res){
            const product = await Product.create(req.body);

            return res.json(product)
      },

      //metodo para atualização de dados
      async update(req, res){
           const product = await Product.findByIdAndUpdate(req.params.id, req.body, {new: true});

           return res.json(product) 
      },

      //metodo para deletar os dados
      async destroy(req, res){
            await Product.findByIdAndRemove(req.params.id);

            return res.send()
      }
};

no metodo update o parametro {new:true} server para passar o valor atualizado para 
a constante product sem ele essa constante iria receber os dados antes de ser atualizado 

dentro do routes.js adiconar a rota para busca um unico produto 
abaixo da rota index add 
routes.get('/products/:id', ProductController.show);

depois a rota para atualizar um unico registro
routes.put("/products/:id", ProductController.update);

depois a rota de delete 
routes.delete("/products/:id", ProductController.destroy);
=========================================================
PAGINAÇÃO DA LISTA 
=========================================================
Paginação e utilizado para limitar a quantidade de registro 
que sera mostrada por vez, essa tatica e utilizada para não 
prejudicar a performance da aplicação na hora de lista os 
dados.

primeiramente instalar o mongoose-paginate
npm install mongoose-paginate

depois dentro do product.js dentro do models importa o mongoose-paginate
depois do const mongoose 
const mongoosePaginate = require('mongoose-paginate');

e antes do mongoose.model("product", ProductSchema) add 
ProductSchema.plugin(mongoosePaginate);

agora ir no ProductController no metodo index ou no metodo que lista todas 
as informaçoes e altera para:
async index(req, res){
      const {page = 1} = req.query;
      const products = await Product.paginate({}, {page, limit:10});
      return res.json(products)
}
===============================================================
ADICIONANDO CORS 
===============================================================
e um modulo de segurança que bloqueia acesso de dominios não permitidos 
a nossa api 
instalar o cors 
npm install cors 
depois de instalado devemos importa o cors dentro do server.js 
const cors = require('cors');

depois configurar ele utilizando o use()
app.use(cors());

dentro do cors() pode ser definido os dominios ou ips que poderam ter acesso 
a nossa api, caso nao tenha nenhum parametro fica liberado para acesso de qualquer
local.